-------------------------
-- Text class definition
-------------------------
class.define("Text", {
	-- Gets the size of a string
	-- string: String to measure
	-- Returns: Character dimensions
	---------------------------------
	GetSize = function(T, string)
		return Graphics.GetTextSize(T.font, string);
	end,
	
	-- Gets the width of a string
	-- text: String to measure
	-- begin: Index from which to begin measuring
	-- last: Index at which to end measuring
	-- Returns: The accumulated width
	----------------------------------------------
	GetWidth = function(T, text, begin, last)
		-- Create an empty cache. 
		local cache, w = {}, 0;
		for char in text:sub(begin, math.min(last, #text)):gmatch(".") do
			-- If the character width is not cached, compute it and do so now.
			if not cache[char] then
				cache[char] = T:GetSize(char);
			end
			
			-- Accumulate the width.
			w = w + cache[char];
		end
		return w;
	end,
	
	-- Draws a clipped string at a given position
	-- text: String to draw
	-- x, y: String coordinates
	----------------------------------------------
	DrawString = function(T, text, x, y)
		-- Obtain the final text result.
		if type(text) == "function" then
			text = text();
		end
	
		-- Compute the edge of the clip area, and create an empty cache.
		local cache = {};
		for char in text:gmatch(".") do
			-- Compute and cache the global coordinates of uncached characters.
			if not cache[char] then
				local cw, ch = T:GetSize(char);
				cache[char] = { w = cw, h = ch };
			end
			local dim = cache[char];
			
			-- Draw the character. Increment the x-coordinate.
			Graphics.DrawTextImage(T.textset[char], x, y, dim.w, dim.h);
			x = x + dim.w;
		end
	end
}, 

-- New
-- name: Font name
-- size: Font size
-- set: Character set
-- r, g, b: Text color
-----------------------
function(T, name, size, set, r, g, b)
	T.font, T.textset = Graphics.LoadFont(name, size), {};
	
	-- Load all relevant symbols.
	for char in set:gmatch(".") do
		T.textset[char] = Graphics.LoadTextImage(T.font, char, r, g, b);
		
		-- If the character is alphabetic, load its lowercase counterpart.
		local lower = char:lower();
		if char ~= lower then
			T.textset[lower] = Graphics.LoadTextImage(T.font, lower, r, g, b);
		end
	end
end);
